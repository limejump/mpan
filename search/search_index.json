{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"mpan \u00b6 A library to help you parse the UK energy industry's MPAN number format. External References \u00b6 This is based largely on the Wikipedia article on the MPAN standard. The validation code for example is cribbed right from there.","title":"Home"},{"location":"#mpan","text":"A library to help you parse the UK energy industry's MPAN number format.","title":"mpan"},{"location":"#external-references","text":"This is based largely on the Wikipedia article on the MPAN standard. The validation code for example is cribbed right from there.","title":"External References"},{"location":"changelog/","text":"Changelog \u00b6 1.1.0 \u00b6 Added support for automatic generation of valid MPANs with either Faker or Mimesis. 1.0.4 \u00b6 Minor update to the validation error message. 1.0.3 \u00b6 Bugfix: Comparing two identical MPAN objects now returns boolean True , while comparing an MPAN object to a string of the same value returns False . Added lots more documentation to the README. 1.0.2 \u00b6 .is_valid() was amended to validate the top row as well. is_valid() now returns a boolean rather than potentially throwing an InvalidMPANError . 1.0.1 \u00b6 Minor change to use a new contact email 1.0.0 \u00b6 Initial release","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#110","text":"Added support for automatic generation of valid MPANs with either Faker or Mimesis.","title":"1.1.0"},{"location":"changelog/#104","text":"Minor update to the validation error message.","title":"1.0.4"},{"location":"changelog/#103","text":"Bugfix: Comparing two identical MPAN objects now returns boolean True , while comparing an MPAN object to a string of the same value returns False . Added lots more documentation to the README.","title":"1.0.3"},{"location":"changelog/#102","text":".is_valid() was amended to validate the top row as well. is_valid() now returns a boolean rather than potentially throwing an InvalidMPANError .","title":"1.0.2"},{"location":"changelog/#101","text":"Minor change to use a new contact email","title":"1.0.1"},{"location":"changelog/#100","text":"Initial release","title":"1.0.0"},{"location":"development/","text":"Development \u00b6 If you only want to use this library, you can just ignore this section. If however you'd like to extend it or submit a pull request to fix a bug, keep reading. Setting up a Local Development Environment \u00b6 We're using Poetry , so if you want to make some changes, you should install that and then just run poetry install . This will pull in all the development dependencies like pytest , isort , etc. Testing \u00b6 When inside your virtualenv, just run: 1 $ pytest Deployment/Releases \u00b6 To build, use Poetry: 1 $ poetry build To publish a new release, use Poetry for that too: 1 $ poetry publish ...obviously you'll need permissions on PyPI to do that though \ud83d\ude09","title":"Development"},{"location":"development/#development","text":"If you only want to use this library, you can just ignore this section. If however you'd like to extend it or submit a pull request to fix a bug, keep reading.","title":"Development"},{"location":"development/#setting-up-a-local-development-environment","text":"We're using Poetry , so if you want to make some changes, you should install that and then just run poetry install . This will pull in all the development dependencies like pytest , isort , etc.","title":"Setting up a Local Development Environment"},{"location":"development/#testing","text":"When inside your virtualenv, just run: 1 $ pytest","title":"Testing"},{"location":"development/#deploymentreleases","text":"To build, use Poetry: 1 $ poetry build To publish a new release, use Poetry for that too: 1 $ poetry publish ...obviously you'll need permissions on PyPI to do that though \ud83d\ude09","title":"Deployment/Releases"},{"location":"generation/","text":"Generation \u00b6 You may not be interested in parsing an MPAN, but rather would just like a way to reliably generate a valid one a few thousand times. For that, this library has a provider fo both the Faker and Mimesis libraries: Faker \u00b6 Faker support is available via the optional extra faker , so you must install mpan like this to use it: 1 $ pip install mpan [ faker ] Example \u00b6 1 2 3 4 5 6 7 8 9 from faker import Faker from mpan.generation.faker import MPANProvider fake = Faker () fake . add_provider ( MPANProvider ) print ( fake . mpan ()) Mimesis \u00b6 Mimesis support is available via the optional extra mimesis , so you must install mpan like this to use it: 1 $ pip install mpan [ mimesis ] Example \u00b6 1 2 3 4 5 6 7 8 9 10 from mimesis import Generic from mimesis.locales import Locale from mpan.generation.mimesis import MPANProvider generic = Generic ( locale = Locale . DEFAULT ) generic . add_provider ( MPANProvider ) print ( generic . mpan . generate ())","title":"Generation"},{"location":"generation/#generation","text":"You may not be interested in parsing an MPAN, but rather would just like a way to reliably generate a valid one a few thousand times. For that, this library has a provider fo both the Faker and Mimesis libraries:","title":"Generation"},{"location":"generation/#faker","text":"Faker support is available via the optional extra faker , so you must install mpan like this to use it: 1 $ pip install mpan [ faker ]","title":"Faker"},{"location":"generation/#example","text":"1 2 3 4 5 6 7 8 9 from faker import Faker from mpan.generation.faker import MPANProvider fake = Faker () fake . add_provider ( MPANProvider ) print ( fake . mpan ())","title":"Example"},{"location":"generation/#mimesis","text":"Mimesis support is available via the optional extra mimesis , so you must install mpan like this to use it: 1 $ pip install mpan [ mimesis ]","title":"Mimesis"},{"location":"generation/#example_1","text":"1 2 3 4 5 6 7 8 9 10 from mimesis import Generic from mimesis.locales import Locale from mpan.generation.mimesis import MPANProvider generic = Generic ( locale = Locale . DEFAULT ) generic . add_provider ( MPANProvider ) print ( generic . mpan . generate ())","title":"Example"},{"location":"installation/","text":"Installation \u00b6 Getting up and running with mpan is easy. Requirements \u00b6 This is a pure-python module with no external dependencies. However, you'll need to be running Python 3.8 or higher. PyPI \u00b6 It's on PyPI, so you can install it with pip : 1 $ pip install mpan This will give you the base version of the library which can only do parsing and validation. If you also want support for generation, you need to specify which generation method you want to use. It will be rolled in as a dependency: 1 $ pip install mpan [ faker ] or 1 $ pip install mpan [ mimesis ]","title":"Installation"},{"location":"installation/#installation","text":"Getting up and running with mpan is easy.","title":"Installation"},{"location":"installation/#requirements","text":"This is a pure-python module with no external dependencies. However, you'll need to be running Python 3.8 or higher.","title":"Requirements"},{"location":"installation/#pypi","text":"It's on PyPI, so you can install it with pip : 1 $ pip install mpan This will give you the base version of the library which can only do parsing and validation. If you also want support for generation, you need to specify which generation method you want to use. It will be rolled in as a dependency: 1 $ pip install mpan [ faker ] or 1 $ pip install mpan [ mimesis ]","title":"PyPI"},{"location":"parsing/","text":"Parsing & Validation \u00b6 1 2 3 4 from mpan.mpan import MPAN mpan = MPAN ( \"A valid MPAN\" ) Just import the library and pass it the MPAN you want to parse. In response you get a handy MPAN object with a number of convenient properties: The Basics \u00b6 The most common use is likely to be in examining the \"core\": 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 mpan = MPAN ( \"001112221312345678907\" ) mpan . top_line # \"00111222\" mpan . core # \"1312345678907\" mpan . identifier # \"12345678\" mpan . is_short # False mpan . is_long # True mpan . as_short # \"1312345678907\" mpan = MPAN ( \"1312345678907\" ) mpan . top_line # None mpan . core # \"1312345678907\" mpan . identifier # \"12345678\" mpan . is_short # True mpan . is_long # False mpan . as_short # \"1312345678907\" The Top Line \u00b6 You can also go deeper though, and interrogate the top line: 1 2 3 4 5 6 7 8 9 10 11 12 13 mpan = MPAN ( \"001112221312345678907\" ) mpan . profile_class # A ProfileClass instance mpan . profile_class . identifier # \"00\" mpan . profile_class . description # \"Half-hourly supply (import and export)\" mpan . profile_class . is_valid # True mpan . meter_time_switch_code # A MeterTimeSwitchCode instance mpan . meter_time_switch_code . identifier # \"111\" mpan . meter_time_switch_code . description # \"DNO specific\" mpan . meter_time_switch_code . is_valid # True mpan . line_loss_factor_class # \"222\" Note however that if you don't supply a long MPAN, this library can't help you: 1 2 3 4 5 mpan = MPAN ( \"1312345678907\" ) mpan . profile_class # None mpan . meter_time_switch_code # None mpan . line_loss_factor_class # None The Distributor \u00b6 The core can also be broken up to look into the distributor , which is a little tricky, since the distributor id can either refer to a DNO or an IDNO both of which are similar, but slightly different in how we refer to them. This library does its best to represent a unified interface to both: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 mpan = MPAN ( \"2099999999993\" ) mpan . distributor # A Distributor instance mpan . distributor . identifier # \"20\" mpan . distributor . gsp_group_ids # [\"_H\"] mpan . distributor . name # \"Scottish & Southern Electricity Networks\" mpan . distributor . participant_id # \"SOUT\" mpan . distributor . is_dno # True mpan . distributor . is_idno # False mpan . distributor . type # \"DNO\" mpan . distributor . is_valid # True mpan = MPAN ( \"2499999999991\" ) mpan . distributor # A Distributor instance mpan . distributor . identifier # \"24\" mpan . distributor . gsp_group_ids # [\"_A\", \"_B\", \"_C\", \"_D\", \"_E\", \"_F\", \"_G\", \"_H\", \"_J\", \"_K\", \"_L\", \"_M\", \"_N\", \"_P\"] mpan . distributor . name # \"Envoy\" mpan . distributor . participant_id # \"IPNL\" mpan . distributor . is_dno # False mpan . distributor . is_idno # True mpan . distributor . type # \"IDNO\" mpan . distributor . is_valid # True Aliases \u00b6 For people who want to limit the number of characters they're typing, we recognise a few standard acronyms: 1 2 3 mpan . pc # Profile Class mpan . mtc # Meter Time Switch Code mpan . llfc # Line Loss Factor Class","title":"Parsing & Validation"},{"location":"parsing/#parsing-validation","text":"1 2 3 4 from mpan.mpan import MPAN mpan = MPAN ( \"A valid MPAN\" ) Just import the library and pass it the MPAN you want to parse. In response you get a handy MPAN object with a number of convenient properties:","title":"Parsing &amp; Validation"},{"location":"parsing/#the-basics","text":"The most common use is likely to be in examining the \"core\": 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 mpan = MPAN ( \"001112221312345678907\" ) mpan . top_line # \"00111222\" mpan . core # \"1312345678907\" mpan . identifier # \"12345678\" mpan . is_short # False mpan . is_long # True mpan . as_short # \"1312345678907\" mpan = MPAN ( \"1312345678907\" ) mpan . top_line # None mpan . core # \"1312345678907\" mpan . identifier # \"12345678\" mpan . is_short # True mpan . is_long # False mpan . as_short # \"1312345678907\"","title":"The Basics"},{"location":"parsing/#the-top-line","text":"You can also go deeper though, and interrogate the top line: 1 2 3 4 5 6 7 8 9 10 11 12 13 mpan = MPAN ( \"001112221312345678907\" ) mpan . profile_class # A ProfileClass instance mpan . profile_class . identifier # \"00\" mpan . profile_class . description # \"Half-hourly supply (import and export)\" mpan . profile_class . is_valid # True mpan . meter_time_switch_code # A MeterTimeSwitchCode instance mpan . meter_time_switch_code . identifier # \"111\" mpan . meter_time_switch_code . description # \"DNO specific\" mpan . meter_time_switch_code . is_valid # True mpan . line_loss_factor_class # \"222\" Note however that if you don't supply a long MPAN, this library can't help you: 1 2 3 4 5 mpan = MPAN ( \"1312345678907\" ) mpan . profile_class # None mpan . meter_time_switch_code # None mpan . line_loss_factor_class # None","title":"The Top Line"},{"location":"parsing/#the-distributor","text":"The core can also be broken up to look into the distributor , which is a little tricky, since the distributor id can either refer to a DNO or an IDNO both of which are similar, but slightly different in how we refer to them. This library does its best to represent a unified interface to both: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 mpan = MPAN ( \"2099999999993\" ) mpan . distributor # A Distributor instance mpan . distributor . identifier # \"20\" mpan . distributor . gsp_group_ids # [\"_H\"] mpan . distributor . name # \"Scottish & Southern Electricity Networks\" mpan . distributor . participant_id # \"SOUT\" mpan . distributor . is_dno # True mpan . distributor . is_idno # False mpan . distributor . type # \"DNO\" mpan . distributor . is_valid # True mpan = MPAN ( \"2499999999991\" ) mpan . distributor # A Distributor instance mpan . distributor . identifier # \"24\" mpan . distributor . gsp_group_ids # [\"_A\", \"_B\", \"_C\", \"_D\", \"_E\", \"_F\", \"_G\", \"_H\", \"_J\", \"_K\", \"_L\", \"_M\", \"_N\", \"_P\"] mpan . distributor . name # \"Envoy\" mpan . distributor . participant_id # \"IPNL\" mpan . distributor . is_dno # False mpan . distributor . is_idno # True mpan . distributor . type # \"IDNO\" mpan . distributor . is_valid # True","title":"The Distributor"},{"location":"parsing/#aliases","text":"For people who want to limit the number of characters they're typing, we recognise a few standard acronyms: 1 2 3 mpan . pc # Profile Class mpan . mtc # Meter Time Switch Code mpan . llfc # Line Loss Factor Class","title":"Aliases"},{"location":"validation/","text":"Validation Options \u00b6 You've got choices for validation. .is_valid() will check your MPAN string and return a boolean value indicating whether it's valid or not, or you can call .check() on an MPAN instance, which will explode with an InvalidMpanError if your string doesn't check out. Note An important note about validation There are four aspects of validation performed by the validation checks below: the profile class and meter time switch code (if provided as part of the top line in a long MPAN) will be checked against a list of known values, the distributor from the core will be similarly checked, and finally the formula for the check digit will be applied. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from mpan.exceptions import InvalidMPANError from mpan.mpan import MPAN MPAN ( \"2499999999991\" ) . is_valid # True MPAN ( \"2499999999990\" ) . is_valid # False (bad checksum) MPAN ( \"8699999999991\" ) . is_valid # False (bad distributor) MPAN ( \"001112221312345678907\" ) . is_valid # True MPAN ( \"991112221312345678907\" ) . is_valid # False (bad profile class) MPAN ( \"000002221312345678907\" ) . is_valid # False (bad meter time switch code) MPAN ( \"I am not an MPAN\" ) # InvalidMPANError try : MPAN ( \"2499999999991\" ) . check () # Returns None MPAN ( \"2499999999990\" ) . check () # Raises an InvalidMPANError except InvalidMPANError : print ( \"This MPAN is broken\" ) Helpers \u00b6 There's also a shortcut if you just want validation: 1 2 3 4 5 6 from mpan.helpers import is_valid is_valid ( \"2499999999991\" ) # True is_valid ( \"2499999999990\" ) # False is_valid ( \"I am not an MPAN\" ) # False","title":"Validation Options"},{"location":"validation/#validation-options","text":"You've got choices for validation. .is_valid() will check your MPAN string and return a boolean value indicating whether it's valid or not, or you can call .check() on an MPAN instance, which will explode with an InvalidMpanError if your string doesn't check out. Note An important note about validation There are four aspects of validation performed by the validation checks below: the profile class and meter time switch code (if provided as part of the top line in a long MPAN) will be checked against a list of known values, the distributor from the core will be similarly checked, and finally the formula for the check digit will be applied. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from mpan.exceptions import InvalidMPANError from mpan.mpan import MPAN MPAN ( \"2499999999991\" ) . is_valid # True MPAN ( \"2499999999990\" ) . is_valid # False (bad checksum) MPAN ( \"8699999999991\" ) . is_valid # False (bad distributor) MPAN ( \"001112221312345678907\" ) . is_valid # True MPAN ( \"991112221312345678907\" ) . is_valid # False (bad profile class) MPAN ( \"000002221312345678907\" ) . is_valid # False (bad meter time switch code) MPAN ( \"I am not an MPAN\" ) # InvalidMPANError try : MPAN ( \"2499999999991\" ) . check () # Returns None MPAN ( \"2499999999990\" ) . check () # Raises an InvalidMPANError except InvalidMPANError : print ( \"This MPAN is broken\" )","title":"Validation Options"},{"location":"validation/#helpers","text":"There's also a shortcut if you just want validation: 1 2 3 4 5 6 from mpan.helpers import is_valid is_valid ( \"2499999999991\" ) # True is_valid ( \"2499999999990\" ) # False is_valid ( \"I am not an MPAN\" ) # False","title":"Helpers"}]}